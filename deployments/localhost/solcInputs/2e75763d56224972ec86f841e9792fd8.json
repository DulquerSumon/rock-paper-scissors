{
  "language": "Solidity",
  "sources": {
    "contracts/RockPaperScissors.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nlibrary Counters {\r\n    struct Counter {\r\n        uint256 _value;\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\ncontract RockPaperScissors {\r\n    error LowStakeAmount();\r\n    error PaymentError();\r\n    error NotInCreatedState();\r\n    error GameIsNotInJoinedState();\r\n    error OnlyPlayersCanCall();\r\n    error UnapprovedMove();\r\n    error NotInComittedState();\r\n    error MoveIdNotMatched();\r\n\r\n    using Counters for Counters.Counter;\r\n    enum State {\r\n        CREATED,\r\n        JOINED,\r\n        COMMITED,\r\n        REVEALED\r\n    }\r\n    struct Game {\r\n        uint256 id;\r\n        uint256 stakeAmount;\r\n        address[2] players;\r\n        State state;\r\n    }\r\n    struct Move {\r\n        bytes32 hash;\r\n        uint256 value;\r\n    }\r\n    mapping(uint256 => Game) private idToGame;\r\n    Game[] private games;\r\n    mapping(uint256 => mapping(address => Move)) private moves;\r\n    mapping(uint256 => uint256) public winningMoves;\r\n    Counters.Counter private gameId;\r\n    IERC20 private tokenContract;\r\n\r\n    constructor(address _tContract) {\r\n        //rock\r\n        //paper\r\n        //scissors\r\n        winningMoves[1] = 3;\r\n        winningMoves[2] = 1;\r\n        winningMoves[3] = 2;\r\n        tokenContract = IERC20(_tContract);\r\n    }\r\n\r\n    function createGame(uint256 _sAmount) external payable {\r\n        // require(msg.value > 0, \"need to send some ether\");\r\n        if (_sAmount < 1 || _sAmount == 0) {\r\n            revert LowStakeAmount();\r\n        }\r\n        address[2] memory players;\r\n        players[0] = msg.sender;\r\n        // players[1] = participant;\r\n        gameId.increment();\r\n        bool success = tokenContract.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _sAmount\r\n        );\r\n        if (!success) {\r\n            revert PaymentError();\r\n        }\r\n        Game memory game = Game(\r\n            gameId.current(),\r\n            _sAmount,\r\n            players,\r\n            State.CREATED\r\n        );\r\n        idToGame[gameId.current()] = game;\r\n        games.push(game);\r\n    }\r\n\r\n    function joinGame(uint256 _gameId) external payable {\r\n        Game storage game = idToGame[_gameId];\r\n        // require(game.state == State.CREATED, \"must be in created state\");\r\n        if (game.state != State.CREATED) {\r\n            revert NotInCreatedState();\r\n        }\r\n        game.players[1] = msg.sender;\r\n        bool success = tokenContract.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            game.stakeAmount\r\n        );\r\n        if (!success) {\r\n            revert PaymentError();\r\n        }\r\n        game.state = State.JOINED;\r\n    }\r\n\r\n    function commitMove(\r\n        uint256 _gameId,\r\n        uint256 moveId,\r\n        uint256 salt\r\n    ) external {\r\n        Game storage game = idToGame[_gameId];\r\n        // require(game.state == State.JOINED, \"game must be in joined state\");\r\n        if (game.state != State.JOINED) {\r\n            revert GameIsNotInJoinedState();\r\n        }\r\n        // require(\r\n        //     game.players[0] == msg.sender || game.players[1] == msg.sender,\r\n        //     \"can only be called by one of the players\"\r\n        // );\r\n        if (game.players[0] != msg.sender || game.players[1] != msg.sender) {\r\n            revert OnlyPlayersCanCall();\r\n        }\r\n        // require(\r\n        //     moveId == 1 || moveId == 2 || moveId == 3,\r\n        //     \"move id must be either 1, 2, 3\"\r\n        // );\r\n        if (moveId != 1 || moveId != 2 || moveId != 3) {\r\n            revert UnapprovedMove();\r\n        }\r\n        moves[_gameId][msg.sender] = Move(\r\n            keccak256(abi.encodePacked(moveId, salt)),\r\n            0\r\n        );\r\n        if (\r\n            moves[_gameId][game.players[0]].hash != 0 &&\r\n            moves[_gameId][game.players[1]].hash != 0\r\n        ) {\r\n            game.state = State.COMMITED;\r\n        }\r\n    }\r\n\r\n    function revealMove(\r\n        uint256 _gameId,\r\n        uint256 moveId,\r\n        uint256 salt\r\n    ) external {\r\n        Game storage game = idToGame[_gameId];\r\n        Move memory move1 = moves[_gameId][game.players[0]];\r\n        Move memory move2 = moves[_gameId][game.players[1]];\r\n        Move memory moveSender = moves[_gameId][msg.sender];\r\n        // require(game.state == State.COMMITED, \"game must be in commited state\");\r\n        if (game.state != State.COMMITED) {\r\n            revert NotInComittedState();\r\n        }\r\n        // require(\r\n        //     game.players[0] == msg.sender || game.players[1] == msg.sender,\r\n        //     \"can only be called by one of the players\"\r\n        // );\r\n        if (game.players[0] != msg.sender || game.players[1] != msg.sender) {\r\n            revert OnlyPlayersCanCall();\r\n        }\r\n        // require(\r\n        //     moveSender.hash == keccak256(abi.encodePacked(moveId, salt)),\r\n        //     \"moveId does not match commitment\"\r\n        // );\r\n        if (moveSender.hash != keccak256(abi.encodePacked(moveId, salt))) {\r\n            revert MoveIdNotMatched();\r\n        }\r\n        moveSender.value = moveId;\r\n        if (move1.value != 0 && move2.value != 0) {\r\n            if (move1.value == move2.value) {\r\n                // game.players[0].transfer(game.bet);\r\n                tokenContract.transfer(game.players[0], game.stakeAmount);\r\n                tokenContract.transfer(game.players[1], game.stakeAmount);\r\n                // game.players[1].transfer(game.bet);\r\n                game.state = State.REVEALED;\r\n                return;\r\n            }\r\n            address winner;\r\n            winner = winningMoves[move1.value] == move2.value\r\n                ? game.players[0]\r\n                : game.players[1];\r\n            // winner.transfer(2 * game.bet);\r\n            tokenContract.transfer(winner, game.stakeAmount);\r\n            game.state = State.REVEALED;\r\n        }\r\n    }\r\n\r\n    function getGameId() public view returns (uint256) {\r\n        return gameId.current();\r\n    }\r\n\r\n    function getIdToGame(uint256 _id) public view returns (Game memory) {\r\n        return idToGame[_id];\r\n    }\r\n\r\n    function getAvailableGame() public view returns (Game[] memory) {\r\n        uint256 totalGame = gameId.current();\r\n        uint256 availableGame;\r\n\r\n        for (uint256 i = 0; i < totalGame; i++) {\r\n            if (idToGame[i + 1].state == State.CREATED) {\r\n                availableGame += 1;\r\n            }\r\n        }\r\n\r\n        if (availableGame == 0) {\r\n            return new Game[](0);\r\n        }\r\n\r\n        Game[] memory gameList = new Game[](availableGame);\r\n        uint256 currentIndex;\r\n        for (uint256 i = 0; i < totalGame; i++) {\r\n            if (idToGame[i + 1].state == State.CREATED) {\r\n                gameList[currentIndex] = idToGame[i + 1];\r\n                currentIndex += 1;\r\n            }\r\n        }\r\n\r\n        return gameList;\r\n    }\r\n\r\n    function getPlayersJoinedGamed() public view returns (Game[] memory) {\r\n        uint256 totalGame = gameId.current();\r\n        uint256 joinedGame;\r\n        uint256 currentIndex;\r\n        for (uint256 i = 0; i < totalGame; i++) {\r\n            if (games[i + 1].state == State.JOINED) {\r\n                if (\r\n                    games[i + 1].players[0] == msg.sender ||\r\n                    games[i + 1].players[1] == msg.sender\r\n                ) {\r\n                    joinedGame += 1;\r\n                }\r\n            }\r\n        }\r\n        Game[] memory gameList = new Game[](joinedGame);\r\n        for (uint256 i = 0; i < totalGame; i++) {\r\n            if (games[i + 1].state == State.JOINED) {\r\n                if (\r\n                    games[i + 1].players[0] == msg.sender ||\r\n                    games[i + 1].players[1] == msg.sender\r\n                ) {\r\n                    gameList[currentIndex] = games[i + 1];\r\n                    currentIndex += 1;\r\n                }\r\n            }\r\n        }\r\n        return gameList;\r\n    }\r\n\r\n    function getPlayersComitedGamed() public view returns (Game[] memory) {\r\n        uint256 totalGame = gameId.current();\r\n        uint256 commitedGame;\r\n        uint256 currentIndex;\r\n        for (uint256 i = 0; i < totalGame; i++) {\r\n            if (games[i + 1].state == State.COMMITED) {\r\n                if (\r\n                    games[i + 1].players[0] == msg.sender ||\r\n                    games[i + 1].players[1] == msg.sender\r\n                ) {\r\n                    commitedGame += 1;\r\n                }\r\n            }\r\n        }\r\n        Game[] memory gameList = new Game[](commitedGame);\r\n        for (uint256 i = 0; i < totalGame; i++) {\r\n            if (games[i + 1].state == State.COMMITED) {\r\n                if (\r\n                    games[i + 1].players[0] == msg.sender ||\r\n                    games[i + 1].players[1] == msg.sender\r\n                ) {\r\n                    gameList[currentIndex] = games[i + 1];\r\n                    currentIndex += 1;\r\n                }\r\n            }\r\n        }\r\n        return gameList;\r\n    }\r\n\r\n    function getRevealedGamed() public view returns (Game[] memory) {\r\n        uint256 totalGame = gameId.current();\r\n        uint256 revealedGame;\r\n        uint256 currentIndex;\r\n        for (uint256 i = 0; i < totalGame; i++) {\r\n            if (games[i + 1].state == State.REVEALED) {\r\n                revealedGame += 1;\r\n            }\r\n        }\r\n        Game[] memory gameList = new Game[](revealedGame);\r\n        for (uint256 i = 0; i < totalGame; i++) {\r\n            if (games[i + 1].state == State.REVEALED) {\r\n                gameList[currentIndex] = games[i + 1];\r\n                currentIndex += 1;\r\n            }\r\n        }\r\n        return gameList;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}