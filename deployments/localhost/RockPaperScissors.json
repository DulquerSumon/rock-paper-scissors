{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "GameIsNotInJoinedState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LowStakeAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MoveIdNotMatched",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInComittedState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInCreatedState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPlayersCanCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnapprovedMove",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "moveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "commitMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sAmount",
          "type": "uint256"
        }
      ],
      "name": "createGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvailableGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[2]",
              "name": "players",
              "type": "address[2]"
            },
            {
              "internalType": "enum RockPaperScissors.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            }
          ],
          "internalType": "struct RockPaperScissors.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getIdToGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[2]",
              "name": "players",
              "type": "address[2]"
            },
            {
              "internalType": "enum RockPaperScissors.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            }
          ],
          "internalType": "struct RockPaperScissors.Game",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getPlayersComitedGamed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[2]",
              "name": "players",
              "type": "address[2]"
            },
            {
              "internalType": "enum RockPaperScissors.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            }
          ],
          "internalType": "struct RockPaperScissors.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getPlayersJoinedGamed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[2]",
              "name": "players",
              "type": "address[2]"
            },
            {
              "internalType": "enum RockPaperScissors.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            }
          ],
          "internalType": "struct RockPaperScissors.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRevealedGames",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[2]",
              "name": "players",
              "type": "address[2]"
            },
            {
              "internalType": "enum RockPaperScissors.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            }
          ],
          "internalType": "struct RockPaperScissors.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserCreatedGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[2]",
              "name": "players",
              "type": "address[2]"
            },
            {
              "internalType": "enum RockPaperScissors.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            }
          ],
          "internalType": "struct RockPaperScissors.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "joinGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "moveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "revealMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winningMoves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f5f83eab19d7ce1eebbea66749b6c022728d168b445cf8d237a6049ec7a0ace",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2861245",
    "logsBloom": "0x
    "blockHash": "0x32a6a0cf0a928025f4206f3f025fa93571470b432f752983bfb7b85417590726",
    "transactionHash": "0x2f5f83eab19d7ce1eebbea66749b6c022728d168b445cf8d237a6049ec7a0ace",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "2861245",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "8e2f6a316ed21456a95dba74d3655804",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GameIsNotInJoinedState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LowStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MoveIdNotMatched\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInComittedState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInCreatedState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPlayersCanCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnapprovedMove\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"commitMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sAmount\",\"type\":\"uint256\"}],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"players\",\"type\":\"address[2]\"},{\"internalType\":\"enum RockPaperScissors.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"internalType\":\"struct RockPaperScissors.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getIdToGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"players\",\"type\":\"address[2]\"},{\"internalType\":\"enum RockPaperScissors.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"internalType\":\"struct RockPaperScissors.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayersComitedGamed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"players\",\"type\":\"address[2]\"},{\"internalType\":\"enum RockPaperScissors.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"internalType\":\"struct RockPaperScissors.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayersJoinedGamed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"players\",\"type\":\"address[2]\"},{\"internalType\":\"enum RockPaperScissors.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"internalType\":\"struct RockPaperScissors.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevealedGames\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"players\",\"type\":\"address[2]\"},{\"internalType\":\"enum RockPaperScissors.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"internalType\":\"struct RockPaperScissors.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserCreatedGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"players\",\"type\":\"address[2]\"},{\"internalType\":\"enum RockPaperScissors.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"internalType\":\"struct RockPaperScissors.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"revealMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winningMoves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RockPaperScissors.sol\":\"RockPaperScissors\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RockPaperScissors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\nlibrary Counters {\\r\\n    struct Counter {\\r\\n        uint256 _value;\\r\\n    }\\r\\n\\r\\n    function current(Counter storage counter) internal view returns (uint256) {\\r\\n        return counter._value;\\r\\n    }\\r\\n\\r\\n    function increment(Counter storage counter) internal {\\r\\n        unchecked {\\r\\n            counter._value += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function decrement(Counter storage counter) internal {\\r\\n        uint256 value = counter._value;\\r\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\r\\n        unchecked {\\r\\n            counter._value = value - 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset(Counter storage counter) internal {\\r\\n        counter._value = 0;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract RockPaperScissors {\\r\\n    error LowStakeAmount();\\r\\n    error PaymentError();\\r\\n    error NotInCreatedState();\\r\\n    error GameIsNotInJoinedState();\\r\\n    error OnlyPlayersCanCall();\\r\\n    error UnapprovedMove();\\r\\n    error NotInComittedState();\\r\\n    error MoveIdNotMatched();\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    enum State {\\r\\n        CREATED,\\r\\n        JOINED,\\r\\n        COMMITED,\\r\\n        REVEALED\\r\\n    }\\r\\n    struct Game {\\r\\n        uint256 id;\\r\\n        uint256 stakeAmount;\\r\\n        address[2] players;\\r\\n        State state;\\r\\n        address winner;\\r\\n    }\\r\\n    struct Move {\\r\\n        bytes32 hash;\\r\\n        uint256 value;\\r\\n    }\\r\\n    mapping(uint256 => Game) private idToGame;\\r\\n    Game[] private games;\\r\\n    mapping(uint256 => mapping(address => Move)) private moves;\\r\\n    mapping(uint256 => uint256) public winningMoves;\\r\\n    Counters.Counter private gameId;\\r\\n    IERC20 private tokenContract;\\r\\n\\r\\n    constructor(address _tContract) {\\r\\n        //rock\\r\\n        //paper\\r\\n        //scissors\\r\\n        winningMoves[1] = 3;\\r\\n        winningMoves[2] = 1;\\r\\n        winningMoves[3] = 2;\\r\\n        tokenContract = IERC20(_tContract);\\r\\n    }\\r\\n\\r\\n    function createGame(uint256 _sAmount) external payable {\\r\\n        // require(msg.value > 0, \\\"need to send some ether\\\");\\r\\n        if (_sAmount < 1 || _sAmount == 0) {\\r\\n            revert LowStakeAmount();\\r\\n        }\\r\\n        address[2] memory players;\\r\\n        players[0] = msg.sender;\\r\\n        // players[1] = participant;\\r\\n        gameId.increment();\\r\\n        bool success = tokenContract.transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _sAmount\\r\\n        );\\r\\n        if (!success) {\\r\\n            revert PaymentError();\\r\\n        }\\r\\n        Game memory game = Game(\\r\\n            gameId.current(),\\r\\n            _sAmount,\\r\\n            players,\\r\\n            State.CREATED,\\r\\n            address(0)\\r\\n        );\\r\\n        idToGame[gameId.current()] = game;\\r\\n        games.push(game);\\r\\n    }\\r\\n\\r\\n    function joinGame(uint256 _gameId) external payable {\\r\\n        Game storage game = idToGame[_gameId];\\r\\n        // require(game.state == State.CREATED, \\\"must be in created state\\\");\\r\\n        if (game.state != State.CREATED) {\\r\\n            revert NotInCreatedState();\\r\\n        }\\r\\n        game.players[1] = msg.sender;\\r\\n        bool success = tokenContract.transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            game.stakeAmount\\r\\n        );\\r\\n        if (!success) {\\r\\n            revert PaymentError();\\r\\n        }\\r\\n        game.state = State.JOINED;\\r\\n    }\\r\\n\\r\\n    function commitMove(\\r\\n        uint256 _gameId,\\r\\n        uint256 moveId,\\r\\n        uint256 salt\\r\\n    ) external {\\r\\n        Game storage game = idToGame[_gameId];\\r\\n        // require(game.state == State.JOINED, \\\"game must be in joined state\\\");\\r\\n        if (game.state != State.JOINED) {\\r\\n            revert GameIsNotInJoinedState();\\r\\n        }\\r\\n        // require(\\r\\n        //     game.players[0] == msg.sender || game.players[1] == msg.sender,\\r\\n        //     \\\"can only be called by one of the players\\\"\\r\\n        // );\\r\\n        if (game.players[0] != msg.sender && game.players[1] != msg.sender) {\\r\\n            revert OnlyPlayersCanCall();\\r\\n        }\\r\\n        // require(\\r\\n        //     moveId == 1 || moveId == 2 || moveId == 3,\\r\\n        //     \\\"move id must be either 1, 2, 3\\\"\\r\\n        // );\\r\\n        if (moveId != 1 && moveId != 2 && moveId != 3) {\\r\\n            revert UnapprovedMove();\\r\\n        }\\r\\n\\r\\n        moves[_gameId][msg.sender] = Move(\\r\\n            keccak256(abi.encodePacked(moveId, salt)),\\r\\n            salt\\r\\n        );\\r\\n        if (\\r\\n            moves[_gameId][game.players[0]].hash != 0 &&\\r\\n            moves[_gameId][game.players[1]].hash != 0\\r\\n        ) {\\r\\n            game.state = State.COMMITED;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function revealMove(\\r\\n        uint256 _gameId,\\r\\n        uint256 moveId,\\r\\n        uint256 salt\\r\\n    ) external {\\r\\n        Game storage game = idToGame[_gameId];\\r\\n        Move memory move1 = moves[_gameId][game.players[0]];\\r\\n        Move memory move2 = moves[_gameId][game.players[1]];\\r\\n        Move memory moveSender = moves[_gameId][msg.sender];\\r\\n        // require(game.state == State.COMMITED, \\\"game must be in commited state\\\");\\r\\n        if (game.state != State.COMMITED) {\\r\\n            revert NotInComittedState();\\r\\n        }\\r\\n        // require(\\r\\n        //     game.players[0] == msg.sender || game.players[1] == msg.sender,\\r\\n        //     \\\"can only be called by one of the players\\\"\\r\\n        // );\\r\\n        if (game.players[0] != msg.sender && game.players[1] != msg.sender) {\\r\\n            revert OnlyPlayersCanCall();\\r\\n        }\\r\\n        // require(\\r\\n        //     moveSender.hash == keccak256(abi.encodePacked(moveId, salt)),\\r\\n        //     \\\"moveId does not match commitment\\\"\\r\\n        // );\\r\\n        if (moveSender.hash != keccak256(abi.encodePacked(moveId, salt))) {\\r\\n            revert MoveIdNotMatched();\\r\\n        }\\r\\n        moveSender.value = moveId;\\r\\n        if (move1.value != 0 && move2.value != 0) {\\r\\n            if (move1.value == move2.value) {\\r\\n                // game.players[0].transfer(game.bet);\\r\\n                tokenContract.transfer(game.players[0], game.stakeAmount);\\r\\n                tokenContract.transfer(game.players[1], game.stakeAmount);\\r\\n                // game.players[1].transfer(game.bet);\\r\\n                game.state = State.REVEALED;\\r\\n                return;\\r\\n            }\\r\\n            address winner;\\r\\n            winner = winningMoves[move1.value] == move2.value\\r\\n                ? game.players[0]\\r\\n                : game.players[1];\\r\\n            // winner.transfer(2 * game.bet);\\r\\n            tokenContract.transfer(winner, game.stakeAmount);\\r\\n            game.state = State.REVEALED;\\r\\n            game.winner = winner;\\r\\n        } else {\\r\\n            revert(\\\"Unkown Salt\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getGameId() public view returns (uint256) {\\r\\n        return gameId.current();\\r\\n    }\\r\\n\\r\\n    function getIdToGame(uint256 _id) public view returns (Game memory) {\\r\\n        return idToGame[_id];\\r\\n    }\\r\\n\\r\\n    function getAvailableGame() public view returns (Game[] memory) {\\r\\n        uint256 totalGame = gameId.current();\\r\\n        uint256 availableGame;\\r\\n\\r\\n        for (uint256 i = 0; i < totalGame; i++) {\\r\\n            if (idToGame[i + 1].state == State.CREATED) {\\r\\n                availableGame += 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (availableGame == 0) {\\r\\n            return new Game[](0);\\r\\n        }\\r\\n\\r\\n        Game[] memory gameList = new Game[](availableGame);\\r\\n        uint256 currentIndex;\\r\\n        for (uint256 i = 0; i < totalGame; i++) {\\r\\n            if (idToGame[i + 1].state == State.CREATED) {\\r\\n                gameList[currentIndex] = idToGame[i + 1];\\r\\n                currentIndex += 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return gameList;\\r\\n    }\\r\\n\\r\\n    function getUserCreatedGame(\\r\\n        address _user\\r\\n    ) public view returns (Game[] memory) {\\r\\n        uint256 totalGame = gameId.current();\\r\\n        uint256 availableGame;\\r\\n\\r\\n        for (uint256 i = 0; i < totalGame; i++) {\\r\\n            if (idToGame[i + 1].players[0] == _user) {\\r\\n                availableGame += 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (availableGame == 0) {\\r\\n            return new Game[](0);\\r\\n        }\\r\\n\\r\\n        Game[] memory gameList = new Game[](availableGame);\\r\\n        uint256 currentIndex;\\r\\n        for (uint256 i = 0; i < totalGame; i++) {\\r\\n            if (idToGame[i + 1].players[0] == _user) {\\r\\n                gameList[currentIndex] = idToGame[i + 1];\\r\\n                currentIndex += 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return gameList;\\r\\n    }\\r\\n\\r\\n    function getPlayersJoinedGamed(\\r\\n        address _player\\r\\n    ) public view returns (Game[] memory) {\\r\\n        uint256 totalGame = gameId.current();\\r\\n        uint256 joinedGame;\\r\\n        uint256 currentIndex;\\r\\n        for (uint256 i = 0; i < totalGame; i++) {\\r\\n            if (idToGame[i + 1].players[1] == _player) {\\r\\n                if (idToGame[i + 1].state == State.JOINED) {\\r\\n                    joinedGame += 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        Game[] memory gameList = new Game[](joinedGame);\\r\\n        for (uint256 i = 0; i < totalGame; i++) {\\r\\n            if (idToGame[i + 1].players[1] == _player) {\\r\\n                if (idToGame[i + 1].state == State.JOINED) {\\r\\n                    gameList[currentIndex] = idToGame[i + 1];\\r\\n                    currentIndex += 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return gameList;\\r\\n    }\\r\\n\\r\\n    function getPlayersComitedGamed(\\r\\n        address _player\\r\\n    ) public view returns (Game[] memory) {\\r\\n        uint256 totalGame = gameId.current();\\r\\n        uint256 commitedGame;\\r\\n        uint256 currentIndex;\\r\\n        for (uint256 i = 0; i < totalGame; i++) {\\r\\n            if (idToGame[i + 1].state == State.COMMITED) {\\r\\n                if (\\r\\n                    idToGame[i + 1].players[0] == _player ||\\r\\n                    idToGame[i + 1].players[1] == _player\\r\\n                ) {\\r\\n                    commitedGame += 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        Game[] memory gameList = new Game[](commitedGame);\\r\\n        for (uint256 i = 0; i < totalGame; i++) {\\r\\n            if (idToGame[i + 1].state == State.COMMITED) {\\r\\n                if (\\r\\n                    idToGame[i + 1].players[0] == _player ||\\r\\n                    idToGame[i + 1].players[1] == _player\\r\\n                ) {\\r\\n                    gameList[currentIndex] = idToGame[i + 1];\\r\\n                    currentIndex += 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return gameList;\\r\\n    }\\r\\n\\r\\n    function getRevealedGames() public view returns (Game[] memory) {\\r\\n        uint256 totalGame = gameId.current();\\r\\n        uint256 revealedGame;\\r\\n        uint256 currentIndex;\\r\\n        for (uint256 i = 0; i < totalGame; i++) {\\r\\n            if (idToGame[i + 1].state == State.REVEALED) {\\r\\n                revealedGame += 1;\\r\\n            }\\r\\n        }\\r\\n        Game[] memory gameList = new Game[](revealedGame);\\r\\n        for (uint256 i = 0; i < totalGame; i++) {\\r\\n            if (idToGame[i + 1].state == State.REVEALED) {\\r\\n                gameList[currentIndex] = idToGame[i + 1];\\r\\n                currentIndex += 1;\\r\\n            }\\r\\n        }\\r\\n        return gameList;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8b29a98c4865fdd02b74a5e6c998c06d61eafe44c588682fdd793ad23cf97b93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620032ac380380620032ac833981810160405281019062000037919062000136565b600380600060018152602001908152602001600020819055506001600360006002815260200190815260200160002081905550600260036000600381526020019081526020016000208190555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000168565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000fe82620000d1565b9050919050565b6200011081620000f1565b81146200011c57600080fd5b50565b600081519050620001308162000105565b92915050565b6000602082840312156200014f576200014e620000cc565b5b60006200015f848285016200011f565b91505092915050565b61313480620001786000396000f3fe6080604052600436106100a75760003560e01c8063a503813e11610064578063a503813e146101d1578063b93c1ad2146101fc578063c0bd835114610239578063c90dd42314610264578063efaa55a01461028f578063f698cd01146102ab576100a7565b8063025ed496146100ac57806334d3ce4b146100e9578063354fe54a1461011257806348e837b91461013b5780634b4cbb451461015757806383a631d314610194575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190612a5d565b6102e8565b6040516100e09190612cdc565b60405180910390f35b3480156100f557600080fd5b50610110600480360381019061010b9190612d2a565b610802565b005b34801561011e57600080fd5b5061013960048036038101906101349190612d2a565b610bf5565b005b61015560048036038101906101509190612d7d565b6113dd565b005b34801561016357600080fd5b5061017e60048036038101906101799190612d7d565b611755565b60405161018b9190612db9565b60405180910390f35b3480156101a057600080fd5b506101bb60048036038101906101b69190612a5d565b61176d565b6040516101c89190612cdc565b60405180910390f35b3480156101dd57600080fd5b506101e6611b27565b6040516101f39190612cdc565b60405180910390f35b34801561020857600080fd5b50610223600480360381019061021e9190612d7d565b611e83565b6040516102309190612e3c565b60405180910390f35b34801561024557600080fd5b5061024e611fcf565b60405161025b9190612db9565b60405180910390f35b34801561027057600080fd5b50610279611fe0565b6040516102869190612cdc565b60405180910390f35b6102a960048036038101906102a49190612d7d565b6122cc565b005b3480156102b757600080fd5b506102d260048036038101906102cd9190612a5d565b6124bb565b6040516102df9190612cdc565b60405180910390f35b606060006102f660046128bd565b905060008060005b83811015610498576002600381111561031a57610319612b7a565b5b60008060018461032a9190612e86565b815260200190815260200160002060040160009054906101000a900460ff16600381111561035b5761035a612b7a565b5b03610485578573ffffffffffffffffffffffffffffffffffffffff166000806001846103879190612e86565b81526020019081526020016000206002016000600281106103ab576103aa612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061046f57508573ffffffffffffffffffffffffffffffffffffffff166000806001846104119190612e86565b815260200190815260200160002060020160016002811061043557610434612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15610484576001836104819190612e86565b92505b5b808061049090612ee9565b9150506102fe565b5060008267ffffffffffffffff8111156104b5576104b4612f31565b5b6040519080825280602002602001820160405280156104ee57816020015b6104db6128e1565b8152602001906001900390816104d35790505b50905060005b848110156107f557600260038111156105105761050f612b7a565b5b6000806001846105209190612e86565b815260200190815260200160002060040160009054906101000a900460ff16600381111561055157610550612b7a565b5b036107e2578673ffffffffffffffffffffffffffffffffffffffff1660008060018461057d9190612e86565b81526020019081526020016000206002016000600281106105a1576105a0612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061066557508673ffffffffffffffffffffffffffffffffffffffff166000806001846106079190612e86565b815260200190815260200160002060020160016002811061062b5761062a612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156107e15760008060018361067a9190612e86565b81526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201600280602002604051908101604052809291908260028015610719576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106cf575b505050505081526020016004820160009054906101000a900460ff16600381111561074757610746612b7a565b5b600381111561075957610758612b7a565b5b81526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508284815181106107c6576107c5612eba565b5b60200260200101819052506001836107de9190612e86565b92505b5b80806107ed90612ee9565b9150506104f4565b5080945050505050919050565b600080600085815260200190815260200160002090506001600381111561082c5761082b612b7a565b5b8160040160009054906101000a900460ff1660038111156108505761084f612b7a565b5b14610887576040517f11ec21f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816002016000600281106108b5576108b4612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415801561095f57503373ffffffffffffffffffffffffffffffffffffffff168160020160016002811061092457610923612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15610996576040517f571b131800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600183141580156109a8575060028314155b80156109b5575060038314155b156109ec576040517fb2b85f1500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808484604051602001610a0a929190612f81565b604051602081830303815290604052805190602001208152602001838152506002600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050506000801b60026000868152602001908152602001600020600083600201600060028110610ac057610abf612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414158015610bbc57506000801b60026000868152602001908152602001600020600083600201600160028110610b5957610b58612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414155b15610bef5760028160040160006101000a81548160ff02191690836003811115610be957610be8612b7a565b5b02179055505b50505050565b60008060008581526020019081526020016000209050600060026000868152602001908152602001600020600083600201600060028110610c3957610c38612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600060026000878152602001908152602001600020600084600201600160028110610ce457610ce3612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905060006002600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905060026003811115610de857610de7612b7a565b5b8460040160009054906101000a900460ff166003811115610e0c57610e0b612b7a565b5b14610e43576040517fb8cf966b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1684600201600060028110610e7157610e70612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015610f1b57503373ffffffffffffffffffffffffffffffffffffffff1684600201600160028110610ee057610edf612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15610f52576040517f571b131800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8585604051602001610f65929190612f81565b60405160208183030381529060405280519060200120816000015114610fb7576040517f8b7ff8e500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b858160200181815250506000836020015114158015610fdb57506000826020015114155b156113985781602001518360200151036111df57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8560020160006002811061104457611043612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600101546040518363ffffffff1660e01b8152600401611088929190612fbc565b6020604051808303816000875af11580156110a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cb919061301d565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8560020160016002811061112157611120612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600101546040518363ffffffff1660e01b8152600401611165929190612fbc565b6020604051808303816000875af1158015611184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a8919061301d565b5060038460040160006101000a81548160ff021916908360038111156111d1576111d0612b7a565b5b0217905550505050506113d8565b6000826020015160036000866020015181526020019081526020016000205414611241578460020160016002811061121a57611219612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661127b565b8460020160006002811061125857611257612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8287600101546040518363ffffffff1660e01b81526004016112de929190612fbc565b6020604051808303816000875af11580156112fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611321919061301d565b5060038560040160006101000a81548160ff0219169083600381111561134a57611349612b7a565b5b0217905550808560040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506113d3565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ca906130a7565b60405180910390fd5b505050505b505050565b60018110806113ec5750600081145b15611423576040517fa1b0d46900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61142b61293e565b33816000600281106114405761143f612eba565b5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061148160046128cb565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016114e2939291906130c7565b6020604051808303816000875af1158015611501573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611525919061301d565b90508061155e576040517fabab8fc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060a0016040528061157560046128bd565b81526020018581526020018481526020016000600381111561159a57611599612b7a565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152509050806000806115ca60046128bd565b81526020019081526020016000206000820151816000015560208201518160010155604082015181600201906002611603929190612960565b5060608201518160040160006101000a81548160ff0219169083600381111561162f5761162e612b7a565b5b021790555060808201518160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050600181908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000155602082015181600101556040820151816002019060026116d5929190612960565b5060608201518160040160006101000a81548160ff0219169083600381111561170157611700612b7a565b5b021790555060808201518160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b60036020528060005260406000206000915090505481565b6060600061177b60046128bd565b9050600080600090505b82811015611838578473ffffffffffffffffffffffffffffffffffffffff166000806001846117b49190612e86565b81526020019081526020016000206002016000600281106117d8576117d7612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611825576001826118229190612e86565b91505b808061183090612ee9565b915050611785565b506000810361189f57600067ffffffffffffffff81111561185c5761185b612f31565b5b60405190808252806020026020018201604052801561189557816020015b6118826128e1565b81526020019060019003908161187a5790505b5092505050611b22565b60008167ffffffffffffffff8111156118bb576118ba612f31565b5b6040519080825280602002602001820160405280156118f457816020015b6118e16128e1565b8152602001906001900390816118d95790505b509050600080600090505b84811015611b19578673ffffffffffffffffffffffffffffffffffffffff1660008060018461192e9190612e86565b815260200190815260200160002060020160006002811061195257611951612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611b065760008060018361199f9190612e86565b81526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201600280602002604051908101604052809291908260028015611a3e576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116119f4575b505050505081526020016004820160009054906101000a900460ff166003811115611a6c57611a6b612b7a565b5b6003811115611a7e57611a7d612b7a565b5b81526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050838381518110611aeb57611aea612eba565b5b6020026020010181905250600182611b039190612e86565b91505b8080611b1190612ee9565b9150506118ff565b50819450505050505b919050565b60606000611b3560046128bd565b9050600080600090505b82811015611bc45760006003811115611b5b57611b5a612b7a565b5b600080600184611b6b9190612e86565b815260200190815260200160002060040160009054906101000a900460ff166003811115611b9c57611b9b612b7a565b5b03611bb157600182611bae9190612e86565b91505b8080611bbc90612ee9565b915050611b3f565b5060008103611c2b57600067ffffffffffffffff811115611be857611be7612f31565b5b604051908082528060200260200182016040528015611c2157816020015b611c0e6128e1565b815260200190600190039081611c065790505b5092505050611e80565b60008167ffffffffffffffff811115611c4757611c46612f31565b5b604051908082528060200260200182016040528015611c8057816020015b611c6d6128e1565b815260200190600190039081611c655790505b509050600080600090505b84811015611e775760006003811115611ca757611ca6612b7a565b5b600080600184611cb79190612e86565b815260200190815260200160002060040160009054906101000a900460ff166003811115611ce857611ce7612b7a565b5b03611e6457600080600183611cfd9190612e86565b81526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201600280602002604051908101604052809291908260028015611d9c576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611d52575b505050505081526020016004820160009054906101000a900460ff166003811115611dca57611dc9612b7a565b5b6003811115611ddc57611ddb612b7a565b5b81526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050838381518110611e4957611e48612eba565b5b6020026020010181905250600182611e619190612e86565b91505b8080611e6f90612ee9565b915050611c8b565b50819450505050505b90565b611e8b6128e1565b6000808381526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201600280602002604051908101604052809291908260028015611f2e576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611ee4575b505050505081526020016004820160009054906101000a900460ff166003811115611f5c57611f5b612b7a565b5b6003811115611f6e57611f6d612b7a565b5b81526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b6000611fdb60046128bd565b905090565b60606000611fee60046128bd565b905060008060005b8381101561207a5760038081111561201157612010612b7a565b5b6000806001846120219190612e86565b815260200190815260200160002060040160009054906101000a900460ff16600381111561205257612051612b7a565b5b03612067576001836120649190612e86565b92505b808061207290612ee9565b915050611ff6565b5060008267ffffffffffffffff81111561209757612096612f31565b5b6040519080825280602002602001820160405280156120d057816020015b6120bd6128e1565b8152602001906001900390816120b55790505b50905060005b848110156122c1576003808111156120f1576120f0612b7a565b5b6000806001846121019190612e86565b815260200190815260200160002060040160009054906101000a900460ff16600381111561213257612131612b7a565b5b036122ae576000806001836121479190612e86565b81526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282016002806020026040519081016040528092919082600280156121e6576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161219c575b505050505081526020016004820160009054906101000a900460ff16600381111561221457612213612b7a565b5b600381111561222657612225612b7a565b5b81526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505082848151811061229357612292612eba565b5b60200260200101819052506001836122ab9190612e86565b92505b80806122b990612ee9565b9150506120d6565b508094505050505090565b60008060008381526020019081526020016000209050600060038111156122f6576122f5612b7a565b5b8160040160009054906101000a900460ff16600381111561231a57612319612b7a565b5b14612351576040517f4c1777d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b338160020160016002811061236957612368612eba565b5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333085600101546040518463ffffffff1660e01b815260040161240d939291906130c7565b6020604051808303816000875af115801561242c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612450919061301d565b905080612489576040517fabab8fc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018260040160006101000a81548160ff021916908360038111156124b1576124b0612b7a565b5b0217905550505050565b606060006124c960046128bd565b905060008060005b838110156125df578573ffffffffffffffffffffffffffffffffffffffff166000806001846125009190612e86565b815260200190815260200160002060020160016002811061252457612523612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036125cc576001600381111561257557612574612b7a565b5b6000806001846125859190612e86565b815260200190815260200160002060040160009054906101000a900460ff1660038111156125b6576125b5612b7a565b5b036125cb576001836125c89190612e86565b92505b5b80806125d790612ee9565b9150506124d1565b5060008267ffffffffffffffff8111156125fc576125fb612f31565b5b60405190808252806020026020018201604052801561263557816020015b6126226128e1565b81526020019060019003908161261a5790505b50905060005b848110156128b0578673ffffffffffffffffffffffffffffffffffffffff1660008060018461266a9190612e86565b815260200190815260200160002060020160016002811061268e5761268d612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361289d57600160038111156126df576126de612b7a565b5b6000806001846126ef9190612e86565b815260200190815260200160002060040160009054906101000a900460ff1660038111156127205761271f612b7a565b5b0361289c576000806001836127359190612e86565b81526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282016002806020026040519081016040528092919082600280156127d4576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161278a575b505050505081526020016004820160009054906101000a900460ff16600381111561280257612801612b7a565b5b600381111561281457612813612b7a565b5b81526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505082848151811061288157612880612eba565b5b60200260200101819052506001836128999190612e86565b92505b5b80806128a890612ee9565b91505061263b565b5080945050505050919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b6040518060a00160405280600081526020016000815260200161290261293e565b81526020016000600381111561291b5761291a612b7a565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060400160405280600290602082028036833780820191505090505090565b82600281019282156129cc579160200282015b828111156129cb5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612973565b5b5090506129d991906129dd565b5090565b5b808211156129f65760008160009055506001016129de565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612a2a826129ff565b9050919050565b612a3a81612a1f565b8114612a4557600080fd5b50565b600081359050612a5781612a31565b92915050565b600060208284031215612a7357612a726129fa565b5b6000612a8184828501612a48565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b612ac981612ab6565b82525050565b600060029050919050565b600081905092915050565b6000819050919050565b612af881612a1f565b82525050565b6000612b0a8383612aef565b60208301905092915050565b6000602082019050919050565b612b2c81612acf565b612b368184612ada565b9250612b4182612ae5565b8060005b83811015612b72578151612b598782612afe565b9650612b6483612b16565b925050600181019050612b45565b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110612bba57612bb9612b7a565b5b50565b6000819050612bcb82612ba9565b919050565b6000612bdb82612bbd565b9050919050565b612beb81612bd0565b82525050565b60c082016000820151612c076000850182612ac0565b506020820151612c1a6020850182612ac0565b506040820151612c2d6040850182612b23565b506060820151612c406080850182612be2565b506080820151612c5360a0850182612aef565b50505050565b6000612c658383612bf1565b60c08301905092915050565b6000602082019050919050565b6000612c8982612a8a565b612c938185612a95565b9350612c9e83612aa6565b8060005b83811015612ccf578151612cb68882612c59565b9750612cc183612c71565b925050600181019050612ca2565b5085935050505092915050565b60006020820190508181036000830152612cf68184612c7e565b905092915050565b612d0781612ab6565b8114612d1257600080fd5b50565b600081359050612d2481612cfe565b92915050565b600080600060608486031215612d4357612d426129fa565b5b6000612d5186828701612d15565b9350506020612d6286828701612d15565b9250506040612d7386828701612d15565b9150509250925092565b600060208284031215612d9357612d926129fa565b5b6000612da184828501612d15565b91505092915050565b612db381612ab6565b82525050565b6000602082019050612dce6000830184612daa565b92915050565b60c082016000820151612dea6000850182612ac0565b506020820151612dfd6020850182612ac0565b506040820151612e106040850182612b23565b506060820151612e236080850182612be2565b506080820151612e3660a0850182612aef565b50505050565b600060c082019050612e516000830184612dd4565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e9182612ab6565b9150612e9c83612ab6565b9250828201905080821115612eb457612eb3612e57565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612ef482612ab6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612f2657612f25612e57565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000819050919050565b612f7b612f7682612ab6565b612f60565b82525050565b6000612f8d8285612f6a565b602082019150612f9d8284612f6a565b6020820191508190509392505050565b612fb681612a1f565b82525050565b6000604082019050612fd16000830185612fad565b612fde6020830184612daa565b9392505050565b60008115159050919050565b612ffa81612fe5565b811461300557600080fd5b50565b60008151905061301781612ff1565b92915050565b600060208284031215613033576130326129fa565b5b600061304184828501613008565b91505092915050565b600082825260208201905092915050565b7f556e6b6f776e2053616c74000000000000000000000000000000000000000000600082015250565b6000613091600b8361304a565b915061309c8261305b565b602082019050919050565b600060208201905081810360008301526130c081613084565b9050919050565b60006060820190506130dc6000830186612fad565b6130e96020830185612fad565b6130f66040830184612daa565b94935050505056fea2646970667358221220b3e5d0e9cf38950bcd40de0aff7be637b2dc967392b4e6c8208749e4d95ffa5664736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063a503813e11610064578063a503813e146101d1578063b93c1ad2146101fc578063c0bd835114610239578063c90dd42314610264578063efaa55a01461028f578063f698cd01146102ab576100a7565b8063025ed496146100ac57806334d3ce4b146100e9578063354fe54a1461011257806348e837b91461013b5780634b4cbb451461015757806383a631d314610194575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190612a5d565b6102e8565b6040516100e09190612cdc565b60405180910390f35b3480156100f557600080fd5b50610110600480360381019061010b9190612d2a565b610802565b005b34801561011e57600080fd5b5061013960048036038101906101349190612d2a565b610bf5565b005b61015560048036038101906101509190612d7d565b6113dd565b005b34801561016357600080fd5b5061017e60048036038101906101799190612d7d565b611755565b60405161018b9190612db9565b60405180910390f35b3480156101a057600080fd5b506101bb60048036038101906101b69190612a5d565b61176d565b6040516101c89190612cdc565b60405180910390f35b3480156101dd57600080fd5b506101e6611b27565b6040516101f39190612cdc565b60405180910390f35b34801561020857600080fd5b50610223600480360381019061021e9190612d7d565b611e83565b6040516102309190612e3c565b60405180910390f35b34801561024557600080fd5b5061024e611fcf565b60405161025b9190612db9565b60405180910390f35b34801561027057600080fd5b50610279611fe0565b6040516102869190612cdc565b60405180910390f35b6102a960048036038101906102a49190612d7d565b6122cc565b005b3480156102b757600080fd5b506102d260048036038101906102cd9190612a5d565b6124bb565b6040516102df9190612cdc565b60405180910390f35b606060006102f660046128bd565b905060008060005b83811015610498576002600381111561031a57610319612b7a565b5b60008060018461032a9190612e86565b815260200190815260200160002060040160009054906101000a900460ff16600381111561035b5761035a612b7a565b5b03610485578573ffffffffffffffffffffffffffffffffffffffff166000806001846103879190612e86565b81526020019081526020016000206002016000600281106103ab576103aa612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061046f57508573ffffffffffffffffffffffffffffffffffffffff166000806001846104119190612e86565b815260200190815260200160002060020160016002811061043557610434612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15610484576001836104819190612e86565b92505b5b808061049090612ee9565b9150506102fe565b5060008267ffffffffffffffff8111156104b5576104b4612f31565b5b6040519080825280602002602001820160405280156104ee57816020015b6104db6128e1565b8152602001906001900390816104d35790505b50905060005b848110156107f557600260038111156105105761050f612b7a565b5b6000806001846105209190612e86565b815260200190815260200160002060040160009054906101000a900460ff16600381111561055157610550612b7a565b5b036107e2578673ffffffffffffffffffffffffffffffffffffffff1660008060018461057d9190612e86565b81526020019081526020016000206002016000600281106105a1576105a0612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061066557508673ffffffffffffffffffffffffffffffffffffffff166000806001846106079190612e86565b815260200190815260200160002060020160016002811061062b5761062a612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156107e15760008060018361067a9190612e86565b81526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201600280602002604051908101604052809291908260028015610719576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106cf575b505050505081526020016004820160009054906101000a900460ff16600381111561074757610746612b7a565b5b600381111561075957610758612b7a565b5b81526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508284815181106107c6576107c5612eba565b5b60200260200101819052506001836107de9190612e86565b92505b5b80806107ed90612ee9565b9150506104f4565b5080945050505050919050565b600080600085815260200190815260200160002090506001600381111561082c5761082b612b7a565b5b8160040160009054906101000a900460ff1660038111156108505761084f612b7a565b5b14610887576040517f11ec21f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816002016000600281106108b5576108b4612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415801561095f57503373ffffffffffffffffffffffffffffffffffffffff168160020160016002811061092457610923612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15610996576040517f571b131800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600183141580156109a8575060028314155b80156109b5575060038314155b156109ec576040517fb2b85f1500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808484604051602001610a0a929190612f81565b604051602081830303815290604052805190602001208152602001838152506002600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050506000801b60026000868152602001908152602001600020600083600201600060028110610ac057610abf612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414158015610bbc57506000801b60026000868152602001908152602001600020600083600201600160028110610b5957610b58612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414155b15610bef5760028160040160006101000a81548160ff02191690836003811115610be957610be8612b7a565b5b02179055505b50505050565b60008060008581526020019081526020016000209050600060026000868152602001908152602001600020600083600201600060028110610c3957610c38612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600060026000878152602001908152602001600020600084600201600160028110610ce457610ce3612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905060006002600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905060026003811115610de857610de7612b7a565b5b8460040160009054906101000a900460ff166003811115610e0c57610e0b612b7a565b5b14610e43576040517fb8cf966b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1684600201600060028110610e7157610e70612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015610f1b57503373ffffffffffffffffffffffffffffffffffffffff1684600201600160028110610ee057610edf612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15610f52576040517f571b131800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8585604051602001610f65929190612f81565b60405160208183030381529060405280519060200120816000015114610fb7576040517f8b7ff8e500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b858160200181815250506000836020015114158015610fdb57506000826020015114155b156113985781602001518360200151036111df57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8560020160006002811061104457611043612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600101546040518363ffffffff1660e01b8152600401611088929190612fbc565b6020604051808303816000875af11580156110a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cb919061301d565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8560020160016002811061112157611120612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600101546040518363ffffffff1660e01b8152600401611165929190612fbc565b6020604051808303816000875af1158015611184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a8919061301d565b5060038460040160006101000a81548160ff021916908360038111156111d1576111d0612b7a565b5b0217905550505050506113d8565b6000826020015160036000866020015181526020019081526020016000205414611241578460020160016002811061121a57611219612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661127b565b8460020160006002811061125857611257612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8287600101546040518363ffffffff1660e01b81526004016112de929190612fbc565b6020604051808303816000875af11580156112fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611321919061301d565b5060038560040160006101000a81548160ff0219169083600381111561134a57611349612b7a565b5b0217905550808560040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506113d3565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ca906130a7565b60405180910390fd5b505050505b505050565b60018110806113ec5750600081145b15611423576040517fa1b0d46900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61142b61293e565b33816000600281106114405761143f612eba565b5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061148160046128cb565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016114e2939291906130c7565b6020604051808303816000875af1158015611501573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611525919061301d565b90508061155e576040517fabab8fc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060a0016040528061157560046128bd565b81526020018581526020018481526020016000600381111561159a57611599612b7a565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152509050806000806115ca60046128bd565b81526020019081526020016000206000820151816000015560208201518160010155604082015181600201906002611603929190612960565b5060608201518160040160006101000a81548160ff0219169083600381111561162f5761162e612b7a565b5b021790555060808201518160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050600181908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000155602082015181600101556040820151816002019060026116d5929190612960565b5060608201518160040160006101000a81548160ff0219169083600381111561170157611700612b7a565b5b021790555060808201518160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b60036020528060005260406000206000915090505481565b6060600061177b60046128bd565b9050600080600090505b82811015611838578473ffffffffffffffffffffffffffffffffffffffff166000806001846117b49190612e86565b81526020019081526020016000206002016000600281106117d8576117d7612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611825576001826118229190612e86565b91505b808061183090612ee9565b915050611785565b506000810361189f57600067ffffffffffffffff81111561185c5761185b612f31565b5b60405190808252806020026020018201604052801561189557816020015b6118826128e1565b81526020019060019003908161187a5790505b5092505050611b22565b60008167ffffffffffffffff8111156118bb576118ba612f31565b5b6040519080825280602002602001820160405280156118f457816020015b6118e16128e1565b8152602001906001900390816118d95790505b509050600080600090505b84811015611b19578673ffffffffffffffffffffffffffffffffffffffff1660008060018461192e9190612e86565b815260200190815260200160002060020160006002811061195257611951612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611b065760008060018361199f9190612e86565b81526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201600280602002604051908101604052809291908260028015611a3e576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116119f4575b505050505081526020016004820160009054906101000a900460ff166003811115611a6c57611a6b612b7a565b5b6003811115611a7e57611a7d612b7a565b5b81526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050838381518110611aeb57611aea612eba565b5b6020026020010181905250600182611b039190612e86565b91505b8080611b1190612ee9565b9150506118ff565b50819450505050505b919050565b60606000611b3560046128bd565b9050600080600090505b82811015611bc45760006003811115611b5b57611b5a612b7a565b5b600080600184611b6b9190612e86565b815260200190815260200160002060040160009054906101000a900460ff166003811115611b9c57611b9b612b7a565b5b03611bb157600182611bae9190612e86565b91505b8080611bbc90612ee9565b915050611b3f565b5060008103611c2b57600067ffffffffffffffff811115611be857611be7612f31565b5b604051908082528060200260200182016040528015611c2157816020015b611c0e6128e1565b815260200190600190039081611c065790505b5092505050611e80565b60008167ffffffffffffffff811115611c4757611c46612f31565b5b604051908082528060200260200182016040528015611c8057816020015b611c6d6128e1565b815260200190600190039081611c655790505b509050600080600090505b84811015611e775760006003811115611ca757611ca6612b7a565b5b600080600184611cb79190612e86565b815260200190815260200160002060040160009054906101000a900460ff166003811115611ce857611ce7612b7a565b5b03611e6457600080600183611cfd9190612e86565b81526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201600280602002604051908101604052809291908260028015611d9c576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611d52575b505050505081526020016004820160009054906101000a900460ff166003811115611dca57611dc9612b7a565b5b6003811115611ddc57611ddb612b7a565b5b81526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050838381518110611e4957611e48612eba565b5b6020026020010181905250600182611e619190612e86565b91505b8080611e6f90612ee9565b915050611c8b565b50819450505050505b90565b611e8b6128e1565b6000808381526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201600280602002604051908101604052809291908260028015611f2e576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611ee4575b505050505081526020016004820160009054906101000a900460ff166003811115611f5c57611f5b612b7a565b5b6003811115611f6e57611f6d612b7a565b5b81526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b6000611fdb60046128bd565b905090565b60606000611fee60046128bd565b905060008060005b8381101561207a5760038081111561201157612010612b7a565b5b6000806001846120219190612e86565b815260200190815260200160002060040160009054906101000a900460ff16600381111561205257612051612b7a565b5b03612067576001836120649190612e86565b92505b808061207290612ee9565b915050611ff6565b5060008267ffffffffffffffff81111561209757612096612f31565b5b6040519080825280602002602001820160405280156120d057816020015b6120bd6128e1565b8152602001906001900390816120b55790505b50905060005b848110156122c1576003808111156120f1576120f0612b7a565b5b6000806001846121019190612e86565b815260200190815260200160002060040160009054906101000a900460ff16600381111561213257612131612b7a565b5b036122ae576000806001836121479190612e86565b81526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282016002806020026040519081016040528092919082600280156121e6576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161219c575b505050505081526020016004820160009054906101000a900460ff16600381111561221457612213612b7a565b5b600381111561222657612225612b7a565b5b81526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505082848151811061229357612292612eba565b5b60200260200101819052506001836122ab9190612e86565b92505b80806122b990612ee9565b9150506120d6565b508094505050505090565b60008060008381526020019081526020016000209050600060038111156122f6576122f5612b7a565b5b8160040160009054906101000a900460ff16600381111561231a57612319612b7a565b5b14612351576040517f4c1777d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b338160020160016002811061236957612368612eba565b5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333085600101546040518463ffffffff1660e01b815260040161240d939291906130c7565b6020604051808303816000875af115801561242c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612450919061301d565b905080612489576040517fabab8fc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018260040160006101000a81548160ff021916908360038111156124b1576124b0612b7a565b5b0217905550505050565b606060006124c960046128bd565b905060008060005b838110156125df578573ffffffffffffffffffffffffffffffffffffffff166000806001846125009190612e86565b815260200190815260200160002060020160016002811061252457612523612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036125cc576001600381111561257557612574612b7a565b5b6000806001846125859190612e86565b815260200190815260200160002060040160009054906101000a900460ff1660038111156125b6576125b5612b7a565b5b036125cb576001836125c89190612e86565b92505b5b80806125d790612ee9565b9150506124d1565b5060008267ffffffffffffffff8111156125fc576125fb612f31565b5b60405190808252806020026020018201604052801561263557816020015b6126226128e1565b81526020019060019003908161261a5790505b50905060005b848110156128b0578673ffffffffffffffffffffffffffffffffffffffff1660008060018461266a9190612e86565b815260200190815260200160002060020160016002811061268e5761268d612eba565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361289d57600160038111156126df576126de612b7a565b5b6000806001846126ef9190612e86565b815260200190815260200160002060040160009054906101000a900460ff1660038111156127205761271f612b7a565b5b0361289c576000806001836127359190612e86565b81526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282016002806020026040519081016040528092919082600280156127d4576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161278a575b505050505081526020016004820160009054906101000a900460ff16600381111561280257612801612b7a565b5b600381111561281457612813612b7a565b5b81526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505082848151811061288157612880612eba565b5b60200260200101819052506001836128999190612e86565b92505b5b80806128a890612ee9565b91505061263b565b5080945050505050919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b6040518060a00160405280600081526020016000815260200161290261293e565b81526020016000600381111561291b5761291a612b7a565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060400160405280600290602082028036833780820191505090505090565b82600281019282156129cc579160200282015b828111156129cb5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612973565b5b5090506129d991906129dd565b5090565b5b808211156129f65760008160009055506001016129de565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612a2a826129ff565b9050919050565b612a3a81612a1f565b8114612a4557600080fd5b50565b600081359050612a5781612a31565b92915050565b600060208284031215612a7357612a726129fa565b5b6000612a8184828501612a48565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b612ac981612ab6565b82525050565b600060029050919050565b600081905092915050565b6000819050919050565b612af881612a1f565b82525050565b6000612b0a8383612aef565b60208301905092915050565b6000602082019050919050565b612b2c81612acf565b612b368184612ada565b9250612b4182612ae5565b8060005b83811015612b72578151612b598782612afe565b9650612b6483612b16565b925050600181019050612b45565b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110612bba57612bb9612b7a565b5b50565b6000819050612bcb82612ba9565b919050565b6000612bdb82612bbd565b9050919050565b612beb81612bd0565b82525050565b60c082016000820151612c076000850182612ac0565b506020820151612c1a6020850182612ac0565b506040820151612c2d6040850182612b23565b506060820151612c406080850182612be2565b506080820151612c5360a0850182612aef565b50505050565b6000612c658383612bf1565b60c08301905092915050565b6000602082019050919050565b6000612c8982612a8a565b612c938185612a95565b9350612c9e83612aa6565b8060005b83811015612ccf578151612cb68882612c59565b9750612cc183612c71565b925050600181019050612ca2565b5085935050505092915050565b60006020820190508181036000830152612cf68184612c7e565b905092915050565b612d0781612ab6565b8114612d1257600080fd5b50565b600081359050612d2481612cfe565b92915050565b600080600060608486031215612d4357612d426129fa565b5b6000612d5186828701612d15565b9350506020612d6286828701612d15565b9250506040612d7386828701612d15565b9150509250925092565b600060208284031215612d9357612d926129fa565b5b6000612da184828501612d15565b91505092915050565b612db381612ab6565b82525050565b6000602082019050612dce6000830184612daa565b92915050565b60c082016000820151612dea6000850182612ac0565b506020820151612dfd6020850182612ac0565b506040820151612e106040850182612b23565b506060820151612e236080850182612be2565b506080820151612e3660a0850182612aef565b50505050565b600060c082019050612e516000830184612dd4565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e9182612ab6565b9150612e9c83612ab6565b9250828201905080821115612eb457612eb3612e57565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612ef482612ab6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612f2657612f25612e57565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000819050919050565b612f7b612f7682612ab6565b612f60565b82525050565b6000612f8d8285612f6a565b602082019150612f9d8284612f6a565b6020820191508190509392505050565b612fb681612a1f565b82525050565b6000604082019050612fd16000830185612fad565b612fde6020830184612daa565b9392505050565b60008115159050919050565b612ffa81612fe5565b811461300557600080fd5b50565b60008151905061301781612ff1565b92915050565b600060208284031215613033576130326129fa565b5b600061304184828501613008565b91505092915050565b600082825260208201905092915050565b7f556e6b6f776e2053616c74000000000000000000000000000000000000000000600082015250565b6000613091600b8361304a565b915061309c8261305b565b602082019050919050565b600060208201905081810360008301526130c081613084565b9050919050565b60006060820190506130dc6000830186612fad565b6130e96020830185612fad565b6130f66040830184612daa565b94935050505056fea2646970667358221220b3e5d0e9cf38950bcd40de0aff7be637b2dc967392b4e6c8208749e4d95ffa5664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 188,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "idToGame",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Game)178_storage)"
      },
      {
        "astId": 192,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "games",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Game)178_storage)dyn_storage"
      },
      {
        "astId": 199,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "moves",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Move)183_storage))"
      },
      {
        "astId": 203,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "winningMoves",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 206,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "gameId",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)71_storage"
      },
      {
        "astId": 209,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "tokenContract",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)68"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)2_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_struct(Game)178_storage)dyn_storage": {
        "base": "t_struct(Game)178_storage",
        "encoding": "dynamic_array",
        "label": "struct RockPaperScissors.Game[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)68": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(State)164": {
        "encoding": "inplace",
        "label": "enum RockPaperScissors.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Move)183_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RockPaperScissors.Move)",
        "numberOfBytes": "32",
        "value": "t_struct(Move)183_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Move)183_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct RockPaperScissors.Move))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Move)183_storage)"
      },
      "t_mapping(t_uint256,t_struct(Game)178_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RockPaperScissors.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)178_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)71_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 70,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Game)178_storage": {
        "encoding": "inplace",
        "label": "struct RockPaperScissors.Game",
        "members": [
          {
            "astId": 166,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 168,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "stakeAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 172,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "players",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)2_storage"
          },
          {
            "astId": 175,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "state",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(State)164"
          },
          {
            "astId": 177,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "winner",
            "offset": 1,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Move)183_storage": {
        "encoding": "inplace",
        "label": "struct RockPaperScissors.Move",
        "members": [
          {
            "astId": 180,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "hash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 182,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}