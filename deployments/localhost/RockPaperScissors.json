{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "GameIsNotInJoinedState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LowStakeAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MoveIdNotMatched",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInComittedState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInCreatedState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPlayersCanCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnapprovedMove",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "moveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "commitMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sAmount",
          "type": "uint256"
        }
      ],
      "name": "createGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvailableGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[2]",
              "name": "players",
              "type": "address[2]"
            },
            {
              "internalType": "enum RockPaperScissors.State",
              "name": "state",
              "type": "uint8"
            }
          ],
          "internalType": "struct RockPaperScissors.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getIdToGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[2]",
              "name": "players",
              "type": "address[2]"
            },
            {
              "internalType": "enum RockPaperScissors.State",
              "name": "state",
              "type": "uint8"
            }
          ],
          "internalType": "struct RockPaperScissors.Game",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayersComitedGamed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[2]",
              "name": "players",
              "type": "address[2]"
            },
            {
              "internalType": "enum RockPaperScissors.State",
              "name": "state",
              "type": "uint8"
            }
          ],
          "internalType": "struct RockPaperScissors.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayersJoinedGamed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[2]",
              "name": "players",
              "type": "address[2]"
            },
            {
              "internalType": "enum RockPaperScissors.State",
              "name": "state",
              "type": "uint8"
            }
          ],
          "internalType": "struct RockPaperScissors.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRevealedGamed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[2]",
              "name": "players",
              "type": "address[2]"
            },
            {
              "internalType": "enum RockPaperScissors.State",
              "name": "state",
              "type": "uint8"
            }
          ],
          "internalType": "struct RockPaperScissors.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "joinGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "moveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "revealMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winningMoves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb0235a7544f31ca4dd363438cb83cffd70ac864407c3cf8c436cb0cc2e0a5e2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2499106",
    "logsBloom": "0x
    "blockHash": "0x9ca372a831b8043c9062ffcba6c6351c9be363979857315e4815cedf25e2f3d8",
    "transactionHash": "0xcb0235a7544f31ca4dd363438cb83cffd70ac864407c3cf8c436cb0cc2e0a5e2",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "2499106",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "2dae2a1a7ca79613b2c342030f3e769d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GameIsNotInJoinedState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LowStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MoveIdNotMatched\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInComittedState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInCreatedState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPlayersCanCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnapprovedMove\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"commitMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sAmount\",\"type\":\"uint256\"}],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"players\",\"type\":\"address[2]\"},{\"internalType\":\"enum RockPaperScissors.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct RockPaperScissors.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getIdToGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"players\",\"type\":\"address[2]\"},{\"internalType\":\"enum RockPaperScissors.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct RockPaperScissors.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayersComitedGamed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"players\",\"type\":\"address[2]\"},{\"internalType\":\"enum RockPaperScissors.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct RockPaperScissors.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayersJoinedGamed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"players\",\"type\":\"address[2]\"},{\"internalType\":\"enum RockPaperScissors.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct RockPaperScissors.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevealedGamed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"players\",\"type\":\"address[2]\"},{\"internalType\":\"enum RockPaperScissors.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct RockPaperScissors.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"revealMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winningMoves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RockPaperScissors.sol\":\"RockPaperScissors\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RockPaperScissors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\nlibrary Counters {\\r\\n    struct Counter {\\r\\n        uint256 _value;\\r\\n    }\\r\\n\\r\\n    function current(Counter storage counter) internal view returns (uint256) {\\r\\n        return counter._value;\\r\\n    }\\r\\n\\r\\n    function increment(Counter storage counter) internal {\\r\\n        unchecked {\\r\\n            counter._value += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function decrement(Counter storage counter) internal {\\r\\n        uint256 value = counter._value;\\r\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\r\\n        unchecked {\\r\\n            counter._value = value - 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset(Counter storage counter) internal {\\r\\n        counter._value = 0;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract RockPaperScissors {\\r\\n    error LowStakeAmount();\\r\\n    error PaymentError();\\r\\n    error NotInCreatedState();\\r\\n    error GameIsNotInJoinedState();\\r\\n    error OnlyPlayersCanCall();\\r\\n    error UnapprovedMove();\\r\\n    error NotInComittedState();\\r\\n    error MoveIdNotMatched();\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    enum State {\\r\\n        CREATED,\\r\\n        JOINED,\\r\\n        COMMITED,\\r\\n        REVEALED\\r\\n    }\\r\\n    struct Game {\\r\\n        uint256 id;\\r\\n        uint256 stakeAmount;\\r\\n        address[2] players;\\r\\n        State state;\\r\\n    }\\r\\n    struct Move {\\r\\n        bytes32 hash;\\r\\n        uint256 value;\\r\\n    }\\r\\n    mapping(uint256 => Game) private idToGame;\\r\\n    Game[] private games;\\r\\n    mapping(uint256 => mapping(address => Move)) private moves;\\r\\n    mapping(uint256 => uint256) public winningMoves;\\r\\n    Counters.Counter private gameId;\\r\\n    IERC20 private tokenContract;\\r\\n\\r\\n    constructor(address _tContract) {\\r\\n        //rock\\r\\n        //paper\\r\\n        //scissors\\r\\n        winningMoves[1] = 3;\\r\\n        winningMoves[2] = 1;\\r\\n        winningMoves[3] = 2;\\r\\n        tokenContract = IERC20(_tContract);\\r\\n    }\\r\\n\\r\\n    function createGame(uint256 _sAmount) external payable {\\r\\n        // require(msg.value > 0, \\\"need to send some ether\\\");\\r\\n        if (_sAmount < 1 || _sAmount == 0) {\\r\\n            revert LowStakeAmount();\\r\\n        }\\r\\n        address[2] memory players;\\r\\n        players[0] = msg.sender;\\r\\n        // players[1] = participant;\\r\\n        gameId.increment();\\r\\n        bool success = tokenContract.transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _sAmount\\r\\n        );\\r\\n        if (!success) {\\r\\n            revert PaymentError();\\r\\n        }\\r\\n        idToGame[gameId.current()] = Game(\\r\\n            gameId.current(),\\r\\n            _sAmount,\\r\\n            players,\\r\\n            State.CREATED\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function joinGame(uint256 _gameId) external payable {\\r\\n        Game storage game = idToGame[_gameId];\\r\\n        // require(game.state == State.CREATED, \\\"must be in created state\\\");\\r\\n        if (game.state != State.CREATED) {\\r\\n            revert NotInCreatedState();\\r\\n        }\\r\\n        game.players[1] = msg.sender;\\r\\n        bool success = tokenContract.transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            game.stakeAmount\\r\\n        );\\r\\n        if (!success) {\\r\\n            revert PaymentError();\\r\\n        }\\r\\n        game.state = State.JOINED;\\r\\n    }\\r\\n\\r\\n    function commitMove(\\r\\n        uint256 _gameId,\\r\\n        uint256 moveId,\\r\\n        uint256 salt\\r\\n    ) external {\\r\\n        Game storage game = idToGame[_gameId];\\r\\n        // require(game.state == State.JOINED, \\\"game must be in joined state\\\");\\r\\n        if (game.state != State.JOINED) {\\r\\n            revert GameIsNotInJoinedState();\\r\\n        }\\r\\n        // require(\\r\\n        //     game.players[0] == msg.sender || game.players[1] == msg.sender,\\r\\n        //     \\\"can only be called by one of the players\\\"\\r\\n        // );\\r\\n        if (game.players[0] != msg.sender || game.players[1] != msg.sender) {\\r\\n            revert OnlyPlayersCanCall();\\r\\n        }\\r\\n        // require(\\r\\n        //     moveId == 1 || moveId == 2 || moveId == 3,\\r\\n        //     \\\"move id must be either 1, 2, 3\\\"\\r\\n        // );\\r\\n        if (moveId != 1 || moveId != 2 || moveId != 3) {\\r\\n            revert UnapprovedMove();\\r\\n        }\\r\\n        moves[_gameId][msg.sender] = Move(\\r\\n            keccak256(abi.encodePacked(moveId, salt)),\\r\\n            0\\r\\n        );\\r\\n        if (\\r\\n            moves[_gameId][game.players[0]].hash != 0 &&\\r\\n            moves[_gameId][game.players[1]].hash != 0\\r\\n        ) {\\r\\n            game.state = State.COMMITED;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function revealMove(\\r\\n        uint256 _gameId,\\r\\n        uint256 moveId,\\r\\n        uint256 salt\\r\\n    ) external {\\r\\n        Game storage game = idToGame[_gameId];\\r\\n        Move memory move1 = moves[_gameId][game.players[0]];\\r\\n        Move memory move2 = moves[_gameId][game.players[1]];\\r\\n        Move memory moveSender = moves[_gameId][msg.sender];\\r\\n        // require(game.state == State.COMMITED, \\\"game must be in commited state\\\");\\r\\n        if (game.state != State.COMMITED) {\\r\\n            revert NotInComittedState();\\r\\n        }\\r\\n        // require(\\r\\n        //     game.players[0] == msg.sender || game.players[1] == msg.sender,\\r\\n        //     \\\"can only be called by one of the players\\\"\\r\\n        // );\\r\\n        if (game.players[0] != msg.sender || game.players[1] != msg.sender) {\\r\\n            revert OnlyPlayersCanCall();\\r\\n        }\\r\\n        // require(\\r\\n        //     moveSender.hash == keccak256(abi.encodePacked(moveId, salt)),\\r\\n        //     \\\"moveId does not match commitment\\\"\\r\\n        // );\\r\\n        if (moveSender.hash != keccak256(abi.encodePacked(moveId, salt))) {\\r\\n            revert MoveIdNotMatched();\\r\\n        }\\r\\n        moveSender.value = moveId;\\r\\n        if (move1.value != 0 && move2.value != 0) {\\r\\n            if (move1.value == move2.value) {\\r\\n                // game.players[0].transfer(game.bet);\\r\\n                tokenContract.transfer(game.players[0], game.stakeAmount);\\r\\n                tokenContract.transfer(game.players[1], game.stakeAmount);\\r\\n                // game.players[1].transfer(game.bet);\\r\\n                game.state = State.REVEALED;\\r\\n                return;\\r\\n            }\\r\\n            address winner;\\r\\n            winner = winningMoves[move1.value] == move2.value\\r\\n                ? game.players[0]\\r\\n                : game.players[1];\\r\\n            // winner.transfer(2 * game.bet);\\r\\n            tokenContract.transfer(winner, game.stakeAmount);\\r\\n            game.state = State.REVEALED;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getGameId() public view returns (uint256) {\\r\\n        return gameId.current();\\r\\n    }\\r\\n\\r\\n    function getIdToGame(uint256 _id) public view returns (Game memory) {\\r\\n        return idToGame[_id];\\r\\n    }\\r\\n\\r\\n    function getAvailableGame() public view returns (Game[] memory) {\\r\\n        uint256 totalGame = gameId.current();\\r\\n        uint256 availableGame;\\r\\n\\r\\n        for (uint256 i = 1; i <= totalGame; i++) {\\r\\n            if (games[i].state == State.CREATED) {\\r\\n                availableGame += 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (availableGame == 0) {\\r\\n            return new Game[](0);\\r\\n        }\\r\\n\\r\\n        Game[] memory gameList = new Game[](availableGame);\\r\\n        uint256 currentIndex;\\r\\n        for (uint256 i = 1; i <= totalGame; i++) {\\r\\n            if (games[i].state == State.CREATED) {\\r\\n                gameList[currentIndex] = games[i];\\r\\n                currentIndex += 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return gameList;\\r\\n    }\\r\\n\\r\\n    function getPlayersJoinedGamed() public view returns (Game[] memory) {\\r\\n        uint256 totalGame = gameId.current();\\r\\n        uint256 joinedGame;\\r\\n        uint256 currentIndex;\\r\\n        for (uint256 i = 0; i < totalGame; i++) {\\r\\n            if (games[i + 1].state == State.JOINED) {\\r\\n                if (\\r\\n                    games[i + 1].players[0] == msg.sender ||\\r\\n                    games[i + 1].players[1] == msg.sender\\r\\n                ) {\\r\\n                    joinedGame += 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        Game[] memory gameList = new Game[](joinedGame);\\r\\n        for (uint256 i = 0; i < totalGame; i++) {\\r\\n            if (games[i + 1].state == State.JOINED) {\\r\\n                if (\\r\\n                    games[i + 1].players[0] == msg.sender ||\\r\\n                    games[i + 1].players[1] == msg.sender\\r\\n                ) {\\r\\n                    gameList[currentIndex] = games[i + 1];\\r\\n                    currentIndex += 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return gameList;\\r\\n    }\\r\\n\\r\\n    function getPlayersComitedGamed() public view returns (Game[] memory) {\\r\\n        uint256 totalGame = gameId.current();\\r\\n        uint256 commitedGame;\\r\\n        uint256 currentIndex;\\r\\n        for (uint256 i = 0; i < totalGame; i++) {\\r\\n            if (games[i + 1].state == State.COMMITED) {\\r\\n                if (\\r\\n                    games[i + 1].players[0] == msg.sender ||\\r\\n                    games[i + 1].players[1] == msg.sender\\r\\n                ) {\\r\\n                    commitedGame += 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        Game[] memory gameList = new Game[](commitedGame);\\r\\n        for (uint256 i = 0; i < totalGame; i++) {\\r\\n            if (games[i + 1].state == State.COMMITED) {\\r\\n                if (\\r\\n                    games[i + 1].players[0] == msg.sender ||\\r\\n                    games[i + 1].players[1] == msg.sender\\r\\n                ) {\\r\\n                    gameList[currentIndex] = games[i + 1];\\r\\n                    currentIndex += 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return gameList;\\r\\n    }\\r\\n\\r\\n    function getRevealedGamed() public view returns (Game[] memory) {\\r\\n        uint256 totalGame = gameId.current();\\r\\n        uint256 revealedGame;\\r\\n        uint256 currentIndex;\\r\\n        for (uint256 i = 0; i < totalGame; i++) {\\r\\n            if (games[i + 1].state == State.REVEALED) {\\r\\n                revealedGame += 1;\\r\\n            }\\r\\n        }\\r\\n        Game[] memory gameList = new Game[](revealedGame);\\r\\n        for (uint256 i = 0; i < totalGame; i++) {\\r\\n            if (games[i + 1].state == State.REVEALED) {\\r\\n                gameList[currentIndex] = games[i + 1];\\r\\n                currentIndex += 1;\\r\\n            }\\r\\n        }\\r\\n        return gameList;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa5e7b94ca001d867ea26934299fdd483d122c2be9cdd10d0a154a7a14d2c6890\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 186,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "idToGame",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Game)176_storage)"
      },
      {
        "astId": 190,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "games",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Game)176_storage)dyn_storage"
      },
      {
        "astId": 197,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "moves",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Move)181_storage))"
      },
      {
        "astId": 201,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "winningMoves",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 204,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "gameId",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)71_storage"
      },
      {
        "astId": 207,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "tokenContract",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)68"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)2_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_struct(Game)176_storage)dyn_storage": {
        "base": "t_struct(Game)176_storage",
        "encoding": "dynamic_array",
        "label": "struct RockPaperScissors.Game[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)68": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(State)164": {
        "encoding": "inplace",
        "label": "enum RockPaperScissors.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Move)181_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RockPaperScissors.Move)",
        "numberOfBytes": "32",
        "value": "t_struct(Move)181_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Move)181_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct RockPaperScissors.Move))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Move)181_storage)"
      },
      "t_mapping(t_uint256,t_struct(Game)176_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RockPaperScissors.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)176_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)71_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 70,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Game)176_storage": {
        "encoding": "inplace",
        "label": "struct RockPaperScissors.Game",
        "members": [
          {
            "astId": 166,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 168,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "stakeAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 172,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "players",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)2_storage"
          },
          {
            "astId": 175,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "state",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(State)164"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Move)181_storage": {
        "encoding": "inplace",
        "label": "struct RockPaperScissors.Move",
        "members": [
          {
            "astId": 178,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "hash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 180,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}